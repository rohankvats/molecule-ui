{"version":3,"sources":["webpack:///./src/components/prop-types-table/PropTypeWrapper.js","webpack:///./src/components/prop-types-table/PropTypeDescription.js","webpack:///./src/components/prop-types-table/PropTypeHeading.js","webpack:///./src/components/PropsTable.js","webpack:///./src/pages/components/button.mdx","webpack:///./src/components/Page.js"],"names":["PropTypeWrapper","render","children","this","props","className","PureComponent","PropTypeDescription","PropTypeHeading","defaultValue","name","required","type","isArrayOf","getSpecificPropTypes","value","map","val","join","Object","keys","key","PropsTable","prop","raw","getDocsForComponent","data","result","allComponentMetadata","edges","find","node","displayName","of","query","componentDocs","rename","composes","length","filePath","slice","indexOf","docblock","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","id","isMDXComponent","flatItems","IA","foundation","items","item","related","x","filter","reduce","acc","curr","Page","getMetaInfo","location","pathname","split","getRelatedItems","metaInfo","componentDidCatch","error","errorInfo","console","relatedItems","Fragment","property","content","autoFocus","onClick","navigate","marginLeft","marginRight","display","icon","ArrowLeftIcon","height","is","href","github","target","style","marginBottom","image","Link","to","iconBefore","React","Component","PageContainer"],"mappings":"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","file":"component---src-pages-components-button-mdx-3b4fdcf5e87122f4f361.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PropTypeWrapper extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  render() {\n    const { children } = this.props\n    return <div className=\"PropTypeWrapper\">{children}</div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PropTypeDescription extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  render() {\n    const { children } = this.props\n    return <div className=\"PropTypeDescription\">{children}</div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nconst getSpecificPropTypes = ({ name, value }) => {\n  switch (name) {\n    // Enums are treated as just having simple values, so no recursive step needed.\n    case 'enum':\n      return value.map(val => val.value).join(' | ')\n    case 'union':\n      return value.map(val => getSpecificPropTypes(val)).join(' | ')\n    case 'arrayOf':\n      return `Array<${getSpecificPropTypes(value)}>`\n    case 'shape':\n      if (typeof value === 'object') {\n        return `{ ${Object.keys(value)\n          .map(\n            key =>\n              `${key}${value[key].required ? '' : '?'}: ${getSpecificPropTypes(\n                value[key]\n              )}`\n          )\n          .join(', ')} }`\n      }\n\n      return value\n\n    // In the case that the type isn't one of these \"nested\" types,\n    // i.e. it's just a primitive value, just return the name\n    default:\n      return name\n  }\n}\n\nexport default class PropTypeHeading extends PureComponent {\n  static propTypes = {\n    defaultValue: PropTypes.any,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.any,\n    isArrayOf: PropTypes.string\n  }\n\n  render() {\n    const { defaultValue, name, required, type, isArrayOf } = this.props\n\n    return (\n      <div className=\"PropTypeHeading\">\n        <code>\n          <span className=\"PropTypeHeading-name\">{name}</span>\n          <span className=\"PropTypeHeading-propType\">\n            {getSpecificPropTypes(type)}\n          </span>\n          {isArrayOf && (\n            <span className=\"PropTypeHeading-arrayOf\">{isArrayOf}</span>\n          )}\n        </code>\n        {defaultValue ? (\n          <code className=\"PropTypeHeading-defaultValue\">\n            {' '}\n            = {defaultValue.value}\n          </code>\n        ) : null}\n        {required ? (\n          <span className=\"PropTypeHeading-required\">required</span>\n        ) : null}\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypeWrapper from './prop-types-table/PropTypeWrapper'\nimport PropTypeDescription from './prop-types-table/PropTypeDescription'\nimport PropTypeHeading from './prop-types-table/PropTypeHeading'\n\nexport default class PropsTable extends PureComponent {\n  static propTypes = {\n    of: PropTypes.string.isRequired,\n    rename: PropTypes.string,\n  }\n\n  isArrayOf = (prop) => {\n    if (\n      prop.type &&\n      prop.type.name === 'arrayOf' &&\n      typeof prop.type.value === 'object' &&\n      typeof prop.type.value.raw === 'string'\n    ) {\n      return prop.type.value.raw\n    }\n  }\n\n  /**\n   * The StaticQuery loads all of the docs within MolecularUI.\n   * We find the docs for just the component we are looking for.\n   */\n  getDocsForComponent = (data) => {\n    const result = data.allComponentMetadata.edges.find(({ node }) => {\n      return node.displayName === this.props.of\n    })\n\n    if (result) return result.node\n    return null\n  }\n\n  render() {\n    return (\n      /**\n       * The plugin gatsby-transformer-react-docgen run react-docgen\n       * on all of MolecularUI and this query returns all of the data for\n       * creating prop types.\n       */\n      <StaticQuery\n        query={graphql`\n          {\n            allComponentMetadata {\n              edges {\n                node {\n                  displayName\n                  composes\n                  description {\n                    id\n                  }\n                  props {\n                    id\n                    name\n                    docblock\n                    defaultValue {\n                      value\n                      computed\n                    }\n                    type {\n                      name\n                      value\n                      raw\n                    }\n                    required\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={(data) => {\n          const componentDocs = this.getDocsForComponent(data)\n          if (!componentDocs)\n            return (\n              <div>\n                <p>\n                  The properties table for this component can’t be rendered at\n                  the moment, due to a bug.\n                </p>\n              </div>\n            )\n          return (\n            <>\n              <div className=\"Content\">\n                <h2 className=\"h2\">\n                  <code className=\"code\">\n                    {this.props.rename || componentDocs.displayName}\n                  </code>{' '}\n                  Props\n                </h2>\n                {componentDocs &&\n                  componentDocs.composes &&\n                  componentDocs.composes.length > 0 && (\n                    <div className=\"PropTypesTable-composes\">\n                      <p>\n                        <strong>This component composes </strong>\n                        {componentDocs.composes.map((filePath) => (\n                          <code key={filePath}>\n                            {filePath.slice(filePath.indexOf('/') + 1)}\n                          </code>\n                        ))}\n                      </p>\n                    </div>\n                  )}\n              </div>\n\n              {componentDocs.props.map((prop) => {\n                const isArrayOf = this.isArrayOf(prop)\n                // Figure out what makes sense here.\n                return (\n                  <PropTypeWrapper key={prop.name}>\n                    <PropTypeHeading\n                      name={prop.name}\n                      required={prop.required}\n                      defaultValue={prop.defaultValue}\n                      type={prop.type || {}}\n                      isArrayOf={isArrayOf}\n                    />\n                    {prop.docblock ? (\n                      <PropTypeDescription>{prop.docblock}</PropTypeDescription>\n                    ) : null}\n                  </PropTypeWrapper>\n                )\n              })}\n            </>\n          )\n        }}\n      />\n    )\n  }\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rohan.vats/code/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`MolecularUI exports multiple button components`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Button`}</strong>{`: most commonly used, can have a icon on the left or right side.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`IconButton`}</strong>{`: a button that holds a single icon.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`BackButton`}</strong>{`: a preset of the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` component.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TextDropdownButton`}</strong>{`: a bare-bones button that is used primarily in table headers.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` all share a very similar API and look.\n`}<inlineCode parentName=\"p\">{`TextDropdownButton`}</inlineCode>{` is a bit different.`}</p>\n    <h1>{`Button`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component is the most common button component.\nIt contains a label and optional icons before or after the label.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button appearance=\"primary\">Hi MolecularUI!</Button>\n`}</code></pre>\n    <h2>{`All button variations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component\n  initialState={{\n    options: [\n      { label: 'Height 24', value: 24 },\n      { label: 'Height 32', value: 32 },\n      { label: 'Height 40', value: 40 },\n    ],\n    value: 32,\n  }}\n>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SegmentedControl\n        name=\"button-size\"\n        width={280}\n        options={state.options}\n        value={state.value}\n        onChange={(value) => setState({ value: Number(value) })}\n      />\n      <Heading marginTop=\"default\">Default Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} marginRight={16}>\n          Default\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"success\">\n          Success\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"warning\">\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"danger\">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} iconBefore={EditIcon}>\n          Icon Before\n        </Button>\n        <Button height={state.value} iconAfter={ArrowRightIcon}>\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop=\"default\">Primary Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance=\"primary\" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"primary\"\n          marginRight={16}\n          intent=\"success\"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"primary\"\n          marginRight={16}\n          intent=\"warning\"\n        >\n          Warning\n        </Button>\n        <Button\n          height={state.value}\n          marginRight={16}\n          appearance=\"primary\"\n          intent=\"danger\"\n        >\n          Danger\n        </Button>\n        <Button\n          height={state.value}\n          marginRight={16}\n          appearance=\"primary\"\n          intent=\"success\"\n          iconBefore={AddIcon}\n        >\n          Icon Before\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"primary\"\n          iconAfter={ArrowRightIcon}\n        >\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop=\"default\">Minimal Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance=\"minimal\" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"minimal\"\n          marginRight={16}\n          intent=\"success\"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"minimal\"\n          marginRight={16}\n          intent=\"warning\"\n        >\n          Warning\n        </Button>\n        <Button\n          height={state.value}\n          marginRight={16}\n          appearance=\"minimal\"\n          intent=\"danger\"\n        >\n          Danger\n        </Button>\n        <Button\n          height={state.value}\n          marginRight={16}\n          appearance=\"minimal\"\n          iconBefore={EditIcon}\n        >\n          Icon Before\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"minimal\"\n          iconAfter={CaretDownIcon}\n        >\n          Icon After\n        </Button>\n      </Pane>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Button Appearances`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component has a `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` property with 3 available values:`}</p>\n    <h3>{`Appearances`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`default`}</inlineCode>{` — this is the default.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`primary`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minimal`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16}>Default</Button>\n  <Button marginRight={16} appearance=\"primary\">\n    Primary\n  </Button>\n  <Button marginRight={16} appearance=\"minimal\">\n    Minimal\n  </Button>\n</>\n`}</code></pre>\n    <h2>{`Button Intent`}</h2>\n    <p>{`In addition to the `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` — a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` can also have a `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property.\nThe `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property is a slightly abstract API that maps to the following values:`}</p>\n    <h3>{`Intent`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`none`}</inlineCode>{` — this is the default.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`success`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`danger`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} intent=\"none\">\n    None\n  </Button>\n  <Button marginRight={16} intent=\"success\">\n    Success\n  </Button>\n  <Button marginRight={16} intent=\"warning\">\n    Warning\n  </Button>\n  <Button marginRight={16} intent=\"danger\">\n    Danger\n  </Button>\n</>\n`}</code></pre>\n    <h2>{`Mixing appearance and intent`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property works with any `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{`.`}</p>\n    <h3>{`Primary with Intent`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} appearance=\"primary\" intent=\"none\">\n    None\n  </Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"success\">\n    Success\n  </Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"warning\">\n    Warning\n  </Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"danger\">\n    Danger\n  </Button>\n</>\n`}</code></pre>\n    <h3>{`Minimal with Intent`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"none\">\n    None\n  </Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"success\">\n    Success\n  </Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"warning\">\n    Warning\n  </Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"danger\">\n    Danger\n  </Button>\n</>\n`}</code></pre>\n    <h2>{`Button Sizes`}</h2>\n    <p>{`By default buttons and controls have a height of `}<inlineCode parentName=\"p\">{`32px`}</inlineCode>{`.\nIt is possible to change this to any height and the text style and spacing will adjust.\nYou should however keep the height on the `}<inlineCode parentName=\"p\">{`8px`}</inlineCode>{` or in some cases the `}<inlineCode parentName=\"p\">{`4px`}</inlineCode>{` grid.\nYou should only need the following recommended heights.`}</p>\n    <h3>{`Recommended heights`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`24`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`32`}</inlineCode>{` — default height`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`40`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={12} height={20}>\n    Height 20\n  </Button>\n  <Button marginRight={12} height={24}>\n    Height 24\n  </Button>\n  <Button marginRight={12} height={32}>\n    Height 32\n  </Button>\n  <Button marginRight={12} height={40}>\n    Height 40\n  </Button>\n  <Button marginRight={12} height={48}>\n    Height 48\n  </Button>\n  <Button marginRight={12} height={56}>\n    Height 56\n  </Button>\n</>\n`}</code></pre>\n    <h2>{`Buttons with an Icon`}</h2>\n    <p>{`Buttons support an icon on either before or after the label. Avoid using two icons in a button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginY={8} marginRight={12} iconBefore={CogIcon}>\n    Settings\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={EditIcon}>\n    Edit\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={ManualIcon}>\n    Docs\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={ArrowLeftIcon}>\n    Back\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={DownloadIcon}>\n    Download...\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={TrashIcon} intent=\"danger\">\n    Delete...\n  </Button>\n  <Button marginY={8} marginRight={12} iconBefore={SearchIcon}>\n    Search\n  </Button>\n  <Button marginY={8} marginRight={12} iconAfter={CaretDownIcon}>\n    Filter\n  </Button>\n</>\n`}</code></pre>\n    <div id=\"api\">\n  <PropsTable of=\"Button\" mdxType=\"PropsTable\" />\n    </div>\n    <h1>{`IconButton`}</h1>\n    <p>{`For the use case of creating a button with a single icon MolecularUI exports the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component.`}</p>\n    <h2>{`Simple IconButton example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon={TrashIcon} intent=\"danger\" />\n`}</code></pre>\n    <h2>{`Use the height property to resize the icon button`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component to resize the component.\nThe icon will automatically resize for the given height.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon={CrossIcon} height={40} />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon={CrossIcon} height={24} />\n`}</code></pre>\n    <h2>{`Specifically override the icon size`}</h2>\n    <p>{`In some rare cases you might need to override the icon size.\nUse the `}<inlineCode parentName=\"p\">{`iconSize`}</inlineCode>{` property to do this.`}</p>\n    <p>{`This is not a required property, the icon will automatically resize based on the given height.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton appearance=\"minimal\" icon={NotificationsIcon} iconSize={18} />\n`}</code></pre>\n    <h2>{`Common icon buttons`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Pane clearfix>\n  <Pane borderRight paddingRight={24} marginRight={24} float=\"left\">\n    <Heading marginBottom={16}>Height 32</Heading>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton marginBottom={16} icon={CogIcon} />\n      <IconButton marginBottom={16} icon={PlusIcon} />\n      <IconButton marginBottom={16} icon={FilterIcon} />\n      <IconButton marginBottom={16} icon={EditIcon} />\n      <IconButton marginBottom={16} icon={RefreshIcon} />\n    </Pane>\n    <Pane float=\"left\">\n      <IconButton marginBottom={16} appearance=\"minimal\" icon={CrossIcon} />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon={MoreIcon} />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon={PlusIcon} />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon={EditIcon} />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon={SearchIcon} />\n    </Pane>\n  </Pane>\n  <Pane float=\"left\">\n    <Heading marginBottom={16}>Height 24</Heading>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton marginBottom={16} height={24} icon={CogIcon} />\n      <IconButton marginBottom={16} height={24} icon={PlusIcon} />\n      <IconButton marginBottom={16} height={24} icon={FilterIcon} />\n      <IconButton marginBottom={16} height={24} icon={EditIcon} />\n      <IconButton marginBottom={16} height={24} icon={ChevronLeftIcon} />\n      <IconButton marginBottom={16} height={24} icon={ChevronRightIcon} />\n    </Pane>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={CrossIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={MoreIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={PlusIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={TrashIcon}\n        intent=\"danger\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={FilterIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={EditIcon}\n      />\n    </Pane>\n    <Pane float=\"left\">\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={ClipboardIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={CalendarIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={LockIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={UnlockIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={NotificationsIcon}\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon={ManualIcon}\n      />\n    </Pane>\n  </Pane>\n</Pane>\n`}</code></pre>\n    <PropsTable of=\"IconButton\" mdxType=\"PropsTable\" />\n    <h1>{`BackButton component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` component is a preset based on the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BackButton />\n`}</code></pre>\n    <PropsTable of=\"BackButton\" mdxType=\"PropsTable\" />\n    <h1>{`Buttons as links`}</h1>\n    <p>{`Buttons can be used as links by using the optional `}<inlineCode parentName=\"p\">{`is`}</inlineCode>{` property with a value such as `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ReactTraining/react-router\"\n      }}>{`react-router`}</a>{`, or an `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` tag.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button is=\"a\" href=\"#\">\n  Link\n</Button>\n`}</code></pre>\n    <h1>{`TextDropdownButton component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextDropdownButton`}</inlineCode>{` is different from the other types of buttons.\nIt doesn’t work with a height, instead the dimensions are based on the text size.\nThis component is used inside of table header cells.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <TextDropdownButton marginRight={16}>Table Header</TextDropdownButton>\n  <TextDropdownButton marginRight={16} icon={ArrowUpIcon}>\n    Ascending\n  </TextDropdownButton>\n  <TextDropdownButton icon={ArrowDownIcon}>Descending</TextDropdownButton>\n</Pane>\n`}</code></pre>\n    <PropsTable of=\"TextDropdownButton\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { Location, navigate } from '@reach/router'\nimport { Button, IconButton, Tooltip, ArrowLeftIcon } from 'molecular-ui'\nimport IA from '../IA'\nimport DocsMDXProvider from './DocsMDXProvider'\nimport TopBar from './TopBar'\nimport Layout from './Layout'\nimport OverviewItem from './OverviewItem'\nimport PageFooter from './PageFooter'\n\nconst flatItems = [\n  ...IA.foundation.items.map(item => {\n    return {\n      ...item,\n      related: [\n        ...(item.related || []),\n        ...IA.foundation.items.map(x => x.id).filter(id => id !== item.id)\n      ]\n    }\n  }),\n  ...IA.components.items.reduce((acc, curr) => {\n    return [\n      ...acc,\n      ...curr.items.map(item => {\n        return {\n          ...item,\n          related: [\n            ...(item.related || []),\n            ...curr.items.map(item => item.id).filter(id => id !== item.id)\n          ]\n        }\n      })\n    ]\n  }, [])\n]\n\n/**\n * Used for component pages.\n */\nclass Page extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    location: PropTypes.object.isRequired\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo)\n  }\n\n  getMetaInfo = () => {\n    const id = this.props.location.pathname.split('/')[2]\n    return flatItems.find(item => item.id === id)\n  }\n\n  getRelatedItems = metaInfo => {\n    return (metaInfo.related || []).map(id => {\n      return flatItems.find(item => item.id === id)\n    })\n  }\n\n  render() {\n    const metaInfo = this.getMetaInfo()\n    if (!metaInfo) return null\n    const relatedItems = this.getRelatedItems(metaInfo)\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>{metaInfo.name} · MolecularUI</title>\n          <meta\n            property=\"og:title\"\n            content={`${metaInfo.name} · MolecularUI`}\n          />\n          <meta\n            property=\"twitter:title\"\n            content={`${metaInfo.name} · MolecularUI`}\n          />\n        </Helmet>\n        <div>\n          <TopBar />\n          <main>\n            <article className=\"MDXPage\">\n              <header className=\"MDXPage-header\">\n                <div className=\"bg-tint1\">\n                  <div className=\"MDXPage-headerContent Container Container--narrow\">\n                    <div className=\"MDXPage-headerContentLeft\">\n                      <Tooltip content=\"Back to Overview\">\n                        <IconButton\n                          autoFocus\n                          onClick={() => {\n                            // Non-ideal, but Tooltip doesn't play nice when using is={Link}\n                            navigate('/components')\n                          }}\n                          marginLeft={-54}\n                          marginRight={16}\n                          display=\"inline-flex\"\n                          icon={ArrowLeftIcon}\n                          height={40}\n                        />\n                      </Tooltip>\n\n                      <h1>{metaInfo.name}</h1>\n                    </div>\n\n                    <Button\n                      is=\"a\"\n                      height={40}\n                      href={metaInfo.github}\n                      target=\"_blank\"\n                    >\n                      View on GitHub\n                    </Button>\n                  </div>\n                </div>\n              </header>\n              <div\n                className=\"Container Container--narrow\"\n                style={{ marginBottom: 120 }}\n              >\n                <DocsMDXProvider>{this.props.children}</DocsMDXProvider>\n              </div>\n            </article>\n\n            {relatedItems.length > 0 && (\n              <div\n                className=\"Overview-group Container Container--narrow\"\n                style={{ marginBottom: 120 }}\n              >\n                <h3 className=\"Overview-groupTitle\">Related</h3>\n                <div className=\"Overview-groupItems\">\n                  {relatedItems.map(item => {\n                    return (\n                      <OverviewItem\n                        key={item.name}\n                        id={item.id}\n                        image={item.image}\n                      >\n                        {item.name}\n                      </OverviewItem>\n                    )\n                  })}\n                </div>\n              </div>\n            )}\n\n            <div\n              className=\"Container Container--narrow\"\n              style={{ marginBottom: 120 }}\n            >\n              <Button\n                is={Link}\n                to=\"/components\"\n                display=\"inline-flex\"\n                iconBefore={ArrowLeftIcon}\n                height={40}\n              >\n                Back to Overview\n              </Button>\n            </div>\n          </main>\n        </div>\n        <PageFooter />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default class PageContainer extends React.Component {\n  render() {\n    return (\n      <Layout>\n        <Location>\n          {({ location }) => {\n            return <Page location={location} {...this.props} />\n          }}\n        </Location>\n      </Layout>\n    )\n  }\n}\n"],"sourceRoot":""}