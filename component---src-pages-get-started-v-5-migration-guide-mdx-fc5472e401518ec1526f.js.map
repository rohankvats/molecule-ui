{"version":3,"sources":["webpack:///./src/pages/get-started/v5-migration-guide.mdx","webpack:///./src/components/MigrationDocsLayout.js","webpack:///./src/components/Sidebar.js","webpack:///./src/components/GetStartedSidebar.js"],"names":["_frontmatter","layoutProps","MDXLayout","children","Layout","Helmet","className","TopBar","style","marginBottom","DocsMDXProvider","GetStartedSidebar","PageFooter","MDXContent","components","props","mdxType","parentName","isMDXComponent","Sidebar","render","this","groups","map","group","key","title","links","label","to","exact","activeClassName","PureComponent","defaultProps"],"mappings":"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","file":"component---src-pages-get-started-v-5-migration-guide-mdx-fc5472e401518ec1526f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport MigrationDocsLayout from '../../components/MigrationDocsLayout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = MigrationDocsLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`MolecularUI v5 Migration Guide`}</h2>\n    <p>{`MolecularUI v5 is a general health check for the framework. We took a look at what makes MolecularUI tick\nand compared it to new standards. We made several updates to try and push the DevX of using the framework\nto be a lot more natural and robust. Below you can see some of the changes we made that may require some\nwork on your side to to upgrade to v5.`}</p>\n    <h3>{`Breaking Changes`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#refs\"\n        }}>{`innerRef is gone. Use ref`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#popovers\"\n        }}>{`Popover triggers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#icons\"\n        }}>{`Importing and using Icons`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#downshift\"\n        }}>{`Downshift v5`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#switch\"\n        }}>{`Switch no longer manages state`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#radiogroup\"\n        }}>{`RadioGroup onChange arguments`}</a></li>\n    </ul>\n    <h3>{`innerRef no longer supported {#refs}`}</h3>\n    <p>{`Previous versions of `}<inlineCode parentName=\"p\">{`ui-box`}</inlineCode>{` and MolecularUI relied on passing around `}<inlineCode parentName=\"p\">{`innerRef`}</inlineCode>{` props to forward refs to the underlying components.\nWe've centralized on the standard way of using refs in React: passing a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` directly on the component. Almost all MolecularUI components\nsupport forwarding refs.`}</p>\n    <p>{`Note: If you find a component that you think should be forwarding refs and isn't, please open an issue on GitHub!`}</p>\n    <p>{`Here's an example of how to update your code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{` const MyComponent = () => {\n   const inputRef = React.useRef()\n-  return <TextInput innerRef={inputRef} />\n+  return <TextInput ref={inputRef} />\n }\n`}</code></pre>\n    <h3>{`Popover triggers {#popovers}`}</h3>\n    <p>{`With the removal of `}<inlineCode parentName=\"p\">{`innerRef`}</inlineCode>{` in MolecularUI, there are some potential changes required with implementations of `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`.\nThe direct `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` of a `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` `}<strong parentName=\"p\">{`must be`}</strong>{` a component that can forward refs to a DOM node. If you are using class components,\nyou'll need to update your code. We've found the easiest path is to use an MolecularUI component – which already handle ref forwarding.\nYou can see an example below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const MyComponent = () => {\n  return (\n    <Popover content={(<Heading size={400} padding={16}>Example Popover</Heading>)}\n+     <Pane display=\"inline-flex\">\n        <MyClassComponent />\n+     </Pane>\n    </Popover>\n  )\n}\n`}</code></pre>\n    <p>{`We recommend using `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` as the trigger, because it provides better accessibility:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const MyComponent = () => {\n  return (\n    <Popover content={(<Heading size={400} padding={16}>Example Popover</Heading>)}\n-     <MyClassComponent />\n+     <Button>Click me!</Button>\n    </Popover>\n  )\n}\n`}</code></pre>\n    <h3>{`Importing and using Icons {#icons}`}</h3>\n    <p>{`Previously, the way we shipped icons in `}<inlineCode parentName=\"p\">{`molecular-ui@^4`}</inlineCode>{` would significantly bloat bundle sizes. Even if you only\nused 1 icon from MolecularUI, you would ship all 400+ icons to your end-users.`}</p>\n    <p>{`In `}<inlineCode parentName=\"p\">{`molecular-ui@^4.26.0`}</inlineCode>{` we introduced a new way to import icons that would lead to `}<em parentName=\"p\">{`some amount`}</em>{` of tree-shaking.`}</p>\n    <p>{`Finally, in `}<inlineCode parentName=\"p\">{`molecular-ui@^5.0.0`}</inlineCode>{` we have full tree-shaking support. This does impact the way you import icons (`}<inlineCode parentName=\"p\">{`import { Icon } from 'molecular-ui'`}</inlineCode>{`) and pass\nicons as props to other components like `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Menu.Item`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`OrderedList`}</inlineCode>{` (and `}<inlineCode parentName=\"p\">{`Ol`}</inlineCode>{`), `}<inlineCode parentName=\"p\">{`UnorderedList`}</inlineCode>{` (and `}<inlineCode parentName=\"p\">{`Ul`}</inlineCode>{`).`}</p>\n    <p>{`We updated all the components that internally were using the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component and updated the prop to no longer expect a string but a React node.\nWe also removed the `}<inlineCode parentName=\"p\">{`Icon`}</inlineCode>{` component from MolecularUI itself. This means that all places you were using this component, you will need to\nupdate to use the new exported icons.`}</p>\n    <p>{`There is also a codemod that can help you with this migration. It can be installed and used from the `}<inlineCode parentName=\"p\">{`codemods`}</inlineCode>{` directory. Notably it only\nupdates `}<inlineCode parentName=\"p\">{`import { Icon } from 'molecular-ui'`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`npx jscodeshift -t node_modules/molecular-ui/codemods/4.28.1.0-4.29.0/replace-icon-imports.js --parser=tsx --extensions=js,ts,tsx <your file target> --dry --print\n`}</code></pre>\n    <h4>{`Migration path`}</h4>\n    <p>{`Importing an icon:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`- import { Icon } from 'molecular-ui'\n+ import { CogIcon } from 'molecular-ui'\n\n- <Icon icon=\"cog\" />\n+ <CogIcon />\n`}</code></pre>\n    <p>{`Passing an icon as a prop:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`- import { Button } from 'molecular-ui'\n+ import { Button, CogIcon } from 'molecular-ui'\n\n- <Button iconBefore=\"cog\">\n+ <Button iconBefore={CogIcon}>\n    Settings\n  </Button>\n`}</code></pre>\n    <h3>{`Downshift v5 {#downshift}`}</h3>\n    <p>{`We upgraded the version of Downshift we use internally in MolecularUI from version `}<inlineCode parentName=\"p\">{`3.3.1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`5.2.0`}</inlineCode>{`. As part of this some\ncomponent props have been deprecated and are no longer available in the components that use Downshift.\nSee the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/segmentio/evergreen/pull/792\"\n      }}>{`diff in #792`}</a>{`.`}</p>\n    <h4>{`Components affected`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`AutoComplete`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Combobox`}</inlineCode></li>\n    </ul>\n    <h4>{`Props removed`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultSelectedItem`}</inlineCode>{` - use `}<inlineCode parentName=\"li\">{`initialSelectedItem`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`defaultInputValue`}</inlineCode>{` - use `}<inlineCode parentName=\"li\">{`initialInputValue`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getButtonProps`}</inlineCode>{` - use `}<inlineCode parentName=\"li\">{`getToggleButtonProps`}</inlineCode></li>\n    </ul>\n    <h3>{`Switch is uncontrolled {#switch}`}</h3>\n    <p>{`To unify usage of form components across MolecularUI, we updated `}<inlineCode parentName=\"p\">{`Switch`}</inlineCode>{` to more closely match other components, such as `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{`.\nWhen using the component it is now required that you pass the component an `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` callback method when wanting to manage state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const [switchIsActive, setSwitchActive] = useState(false)\n\n+ const onChange = (event) => {\n+   setSwitchActive(event.target.checked)\n+ }\n\n- <Switch checked={switchIsActive} />\n+ <Switch checked={switchIsActive} onChange={onChange} />\n`}</code></pre>\n    <h3>{`Radio and RadioGroup onChange arguments {#radiogroup}`}</h3>\n    <p><inlineCode parentName=\"p\">{`RadioGroup`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler now bubbles the `}<em parentName=\"p\">{`event`}</em>{` directly from children `}<inlineCode parentName=\"p\">{`Radio`}</inlineCode>{` inputs instead of bubbling the `}<em parentName=\"p\">{`value`}</em>{`.`}</p>\n    <p>{`This change was made to help improve the internal consistency with `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handlers and to more closely match `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` event signature expecations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const items = [{ label: 'one', value: '1' }, { label: 'two', value: '2' }]\nconst [selected, setSelected] = useState()\n\n<RadioGroup\n  items={items}\n-  onChange={selectedValue => setSelected(selectedValue)}\n+  onChange={event => setSelected(event.target.value)}\n/>\n`}</code></pre>\n    <p>{`Similarly, we removed the second argument from `}<inlineCode parentName=\"p\">{`Radio`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`- <Radio onChange={(event, checked) => console.log(checked)} />\n- <Radio onChange={(event) => console.log(event.target.checked)} />\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport DocsMDXProvider from './DocsMDXProvider'\nimport TopBar from './TopBar'\nimport Layout from './Layout'\nimport PageFooter from './PageFooter'\nimport GetStartedSidebar from './GetStartedSidebar'\n\nconst PageLayout = ({ children }) => (\n  <Layout>\n    <Helmet>\n      <title>Migration Guide · MolecularUI</title>\n    </Helmet>\n    <div className=\"MainLayout\">\n      <TopBar />\n      <main className=\"MainLayout-main\">\n        <div className=\"MainLayout-content\">\n          <section className=\"MainLayout-contentRight\">\n            <div\n              className=\"Container-nextToSidebar\"\n              style={{ marginBottom: 160 }}\n            >\n              <div className=\"Content\">\n                <DocsMDXProvider>{children}</DocsMDXProvider>\n              </div>\n            </div>\n          </section>\n        </div>\n        <GetStartedSidebar />\n      </main>\n    </div>\n    <PageFooter />\n  </Layout>\n)\n\nPageLayout.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default PageLayout\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nexport default class Sidebar extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        exact: PropTypes.bool,\n        links: PropTypes.arrayOf(\n          PropTypes.shape({\n            to: PropTypes.string,\n            label: PropTypes.string\n          })\n        )\n      })\n    )\n  }\n\n  static defaultProps = {\n    groups: []\n  }\n\n  render() {\n    const { children, groups, ...props } = this.props\n    return (\n      <aside className=\"MainLayout-sidebar Sidebar\" {...props}>\n        <div className=\"Sidebar-inner\">\n          {groups.map(group => {\n            return (\n              <div\n                key={group.title || group.links[0].label}\n                className=\"NavGroup\"\n              >\n                {group.title && (\n                  <h3 className=\"NavGroup-title\">{group.title}</h3>\n                )}\n                <nav className=\"NavGroup-nav\">\n                  {group.links.map(({ label, to, exact }) => (\n                    <Link\n                      key={to}\n                      activeClassName=\"is-active\"\n                      to={to}\n                      exact={exact}\n                    >\n                      {label}\n                    </Link>\n                  ))}\n                </nav>\n              </div>\n            )\n          })}\n        </div>\n      </aside>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Sidebar from './Sidebar'\n\nexport default class GetStartedSidebar extends PureComponent {\n  static propTypes = {\n    ...Sidebar.propTypes\n  }\n\n  static defaultProps = {\n    /**\n     * Manually manage components for now\n     */\n    groups: [\n      {\n        links: [\n          {\n            to: '/get-started/introduction',\n            label: 'Introduction'\n          },\n          {\n            to: '/get-started/theming',\n            label: 'Theming'\n          },\n          {\n            to: '/get-started/v5-migration-guide',\n            label: 'Migrating to v5'\n          }\n        ]\n      }\n    ]\n  }\n\n  render() {\n    return <Sidebar {...this.props} />\n  }\n}\n"],"sourceRoot":""}