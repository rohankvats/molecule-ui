{"version":3,"sources":["webpack:///./src/components/prop-types-table/PropTypeWrapper.js","webpack:///./src/components/prop-types-table/PropTypeDescription.js","webpack:///./src/components/prop-types-table/PropTypeHeading.js","webpack:///./src/components/PropsTable.js","webpack:///./src/pages/components/select-menu.mdx","webpack:///./src/components/Page.js"],"names":["PropTypeWrapper","render","children","this","props","className","PureComponent","PropTypeDescription","PropTypeHeading","defaultValue","name","required","type","isArrayOf","getSpecificPropTypes","value","map","val","join","Object","keys","key","PropsTable","prop","raw","getDocsForComponent","data","result","allComponentMetadata","edges","find","node","displayName","of","query","componentDocs","rename","composes","length","filePath","slice","indexOf","docblock","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","flatItems","IA","foundation","items","item","related","x","id","filter","reduce","acc","curr","Page","getMetaInfo","location","pathname","split","getRelatedItems","metaInfo","componentDidCatch","error","errorInfo","console","relatedItems","Fragment","property","content","autoFocus","onClick","navigate","marginLeft","marginRight","display","icon","ArrowLeftIcon","height","is","href","github","target","style","marginBottom","image","Link","to","iconBefore","React","Component","PageContainer"],"mappings":"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","file":"component---src-pages-components-select-menu-mdx-deb82a4ab4be923c0948.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PropTypeWrapper extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  render() {\n    const { children } = this.props\n    return <div className=\"PropTypeWrapper\">{children}</div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PropTypeDescription extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  render() {\n    const { children } = this.props\n    return <div className=\"PropTypeDescription\">{children}</div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nconst getSpecificPropTypes = ({ name, value }) => {\n  switch (name) {\n    // Enums are treated as just having simple values, so no recursive step needed.\n    case 'enum':\n      return value.map(val => val.value).join(' | ')\n    case 'union':\n      return value.map(val => getSpecificPropTypes(val)).join(' | ')\n    case 'arrayOf':\n      return `Array<${getSpecificPropTypes(value)}>`\n    case 'shape':\n      if (typeof value === 'object') {\n        return `{ ${Object.keys(value)\n          .map(\n            key =>\n              `${key}${value[key].required ? '' : '?'}: ${getSpecificPropTypes(\n                value[key]\n              )}`\n          )\n          .join(', ')} }`\n      }\n\n      return value\n\n    // In the case that the type isn't one of these \"nested\" types,\n    // i.e. it's just a primitive value, just return the name\n    default:\n      return name\n  }\n}\n\nexport default class PropTypeHeading extends PureComponent {\n  static propTypes = {\n    defaultValue: PropTypes.any,\n    name: PropTypes.string,\n    required: PropTypes.bool,\n    type: PropTypes.any,\n    isArrayOf: PropTypes.string\n  }\n\n  render() {\n    const { defaultValue, name, required, type, isArrayOf } = this.props\n\n    return (\n      <div className=\"PropTypeHeading\">\n        <code>\n          <span className=\"PropTypeHeading-name\">{name}</span>\n          <span className=\"PropTypeHeading-propType\">\n            {getSpecificPropTypes(type)}\n          </span>\n          {isArrayOf && (\n            <span className=\"PropTypeHeading-arrayOf\">{isArrayOf}</span>\n          )}\n        </code>\n        {defaultValue ? (\n          <code className=\"PropTypeHeading-defaultValue\">\n            {' '}\n            = {defaultValue.value}\n          </code>\n        ) : null}\n        {required ? (\n          <span className=\"PropTypeHeading-required\">required</span>\n        ) : null}\n      </div>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypeWrapper from './prop-types-table/PropTypeWrapper'\nimport PropTypeDescription from './prop-types-table/PropTypeDescription'\nimport PropTypeHeading from './prop-types-table/PropTypeHeading'\n\nexport default class PropsTable extends PureComponent {\n  static propTypes = {\n    of: PropTypes.string.isRequired,\n    rename: PropTypes.string,\n  }\n\n  isArrayOf = (prop) => {\n    if (\n      prop.type &&\n      prop.type.name === 'arrayOf' &&\n      typeof prop.type.value === 'object' &&\n      typeof prop.type.value.raw === 'string'\n    ) {\n      return prop.type.value.raw\n    }\n  }\n\n  /**\n   * The StaticQuery loads all of the docs within MolecularUI.\n   * We find the docs for just the component we are looking for.\n   */\n  getDocsForComponent = (data) => {\n    const result = data.allComponentMetadata.edges.find(({ node }) => {\n      return node.displayName === this.props.of\n    })\n\n    if (result) return result.node\n    return null\n  }\n\n  render() {\n    return (\n      /**\n       * The plugin gatsby-transformer-react-docgen run react-docgen\n       * on all of MolecularUI and this query returns all of the data for\n       * creating prop types.\n       */\n      <StaticQuery\n        query={graphql`\n          {\n            allComponentMetadata {\n              edges {\n                node {\n                  displayName\n                  composes\n                  description {\n                    id\n                  }\n                  props {\n                    id\n                    name\n                    docblock\n                    defaultValue {\n                      value\n                      computed\n                    }\n                    type {\n                      name\n                      value\n                      raw\n                    }\n                    required\n                  }\n                }\n              }\n            }\n          }\n        `}\n        render={(data) => {\n          const componentDocs = this.getDocsForComponent(data)\n          if (!componentDocs)\n            return (\n              <div>\n                <p>\n                  The properties table for this component can’t be rendered at\n                  the moment, due to a bug.\n                </p>\n              </div>\n            )\n          return (\n            <>\n              <div className=\"Content\">\n                <h2 className=\"h2\">\n                  <code className=\"code\">\n                    {this.props.rename || componentDocs.displayName}\n                  </code>{' '}\n                  Props\n                </h2>\n                {componentDocs &&\n                  componentDocs.composes &&\n                  componentDocs.composes.length > 0 && (\n                    <div className=\"PropTypesTable-composes\">\n                      <p>\n                        <strong>This component composes </strong>\n                        {componentDocs.composes.map((filePath) => (\n                          <code key={filePath}>\n                            {filePath.slice(filePath.indexOf('/') + 1)}\n                          </code>\n                        ))}\n                      </p>\n                    </div>\n                  )}\n              </div>\n\n              {componentDocs.props.map((prop) => {\n                const isArrayOf = this.isArrayOf(prop)\n                // Figure out what makes sense here.\n                return (\n                  <PropTypeWrapper key={prop.name}>\n                    <PropTypeHeading\n                      name={prop.name}\n                      required={prop.required}\n                      defaultValue={prop.defaultValue}\n                      type={prop.type || {}}\n                      isArrayOf={isArrayOf}\n                    />\n                    {prop.docblock ? (\n                      <PropTypeDescription>{prop.docblock}</PropTypeDescription>\n                    ) : null}\n                  </PropTypeWrapper>\n                )\n              })}\n            </>\n          )\n        }}\n      />\n    )\n  }\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rohan.vats/code/evergreen/docs/src/components/Page.js\";\nimport SyntaxHighlighter from 'components/SyntaxHighlighter';\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` component is an advanced interaction pattern which allows selection of multiple items from a dropdown list.\nIt can be used as a substitute for the native multiple select element.`}</p>\n    <h3>{`Implementation details`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` builds on top of the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component\nand uses `}<inlineCode parentName=\"p\">{`react-tiny-virtual-list`}</inlineCode>{` for the rendering of the virtualized list of options.`}</p>\n    <h2>{`Multiselect`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` is unopinionated in how many items are selected in the list.\nPass an array to the `}<inlineCode parentName=\"p\">{`selected`}</inlineCode>{` prop to select more items.`}</p>\n    <h2>{`Close on select`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` by default will stay open when an option is selected.\nThis can be configured so that the menu closes on selection.\nThis will not apply for Multiselect menus.`}</p>\n    <h2>{`Options prop structure`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const options = [\n  {\n    label: 'String',\n    value: 'String or Number'\n  }\n]\n`}</code></pre>\n    <h2>{`Single selected item`}</h2>\n    <p>{`This example shows basic usage with a single selected item.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Remove title and filter`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasFilter={false}`}</inlineCode>{`:  to remove the search input filter.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasTitle={false}`}</inlineCode>{`:  to remove the title from the popover.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      hasTitle={false}\n      hasFilter={false}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change the height and width`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      height={140}\n      width={180}\n      hasTitle={false}\n      hasFilter={false}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change the position of the popover`}</h2>\n    <p>{`Available positions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP_LEFT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP_RIGHT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM_LEFT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM_RIGHT`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      position={Position.TOP}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Empty view`}</h2>\n    <p>{`It's possible to display a custom empty view instead of options list via `}<inlineCode parentName=\"p\">{`emptyView`}</inlineCode>{`, when there are no properties supplied.\nNote that empty view won't be shown when options are being filtered and there are no search results.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Empty view\"\n  options={[]}\n  emptyView={(\n    <Pane height=\"100%\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Text size={300}>No options found</Text>\n    </Pane>\n  )}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <p>{`It's also possible to close `}<inlineCode parentName=\"p\">{`<SelectMenu>`}</inlineCode>{` from within empty view:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Empty view\"\n  options={[]}\n  emptyView={({ close }) => (\n    <Pane height=\"100%\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Button onClick={close}>Close</Button>\n    </Pane>\n  )}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <h2>{`Menu with icons`}</h2>\n    <p>{`It's possible to include icons in the menu list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Options with icons\"\n  options={[\n    { label: 'Apple', value: 'Apple', icon: 'https://upload.wikimedia.org/wikipedia/commons/d/d2/Malus-Boskoop_organic.jpg' },\n    { label: 'Banana', value: 'Banana', icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Bananas_white_background_DS.jpg/2560px-Bananas_white_background_DS.jpg' },\n  ]}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <h2>{`Multiselect with deselect example`}</h2>\n    <p>{`This example shows usage with multiple selected items.`}</p>\n    <p>{`This pattern is only an example.\nSelected values and the formatting of their names should be managed wherever you choose to manage state.\nThe `}<inlineCode parentName=\"p\">{`onDeselect`}</inlineCode>{` method is provided to assist with this.`}</p>\n    <p>{`As users click on selected values to remove them, you can update state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{\n    options: ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label })),\n    selected: []\n  }}\n>\n  {({ state, setState }) => (\n    <SelectMenu\n      isMultiSelect\n      title=\"Select multiple names\"\n      options={state.options}\n      selected={state.selected}\n      onSelect={item => {\n        const selected = [...state.selected, item.value]\n        const selectedItems = selected\n        const selectedItemsLength = selectedItems.length\n        let selectedNames = ''\n        if (selectedItemsLength === 0) {\n          selectedNames = ''\n        } else if (selectedItemsLength === 1) {\n          selectedNames = selectedItems.toString()\n        } else if (selectedItemsLength > 1) {\n          selectedNames = selectedItemsLength.toString() + ' selected...'\n        }\n        setState({\n          selected,\n          selectedNames\n        })\n      }}\n      onDeselect={item => {\n        const deselectedItemIndex = state.selected.indexOf(item.value)\n        const selectedItems = state.selected.filter(\n          (_item, i) => i !== deselectedItemIndex\n        )\n        const selectedItemsLength = selectedItems.length\n        let selectedNames = ''\n        if (selectedItemsLength === 0) {\n          selectedNames = ''\n        } else if (selectedItemsLength === 1) {\n          selectedNames = selectedItems.toString()\n        } else if (selectedItemsLength > 1) {\n          selectedNames = selectedItemsLength.toString() + ' selected...'\n        }\n        setState({ selected: selectedItems, selectedNames })\n      }}\n    >\n      <Button>{state.selectedNames || 'Select multiple...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`onFilterChange example`}</h2>\n    <p>{`This example shows basic usage with onFocusChange.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <Pane marginBottom={8}>\n      <Text>Filter value: {state.filter}</Text>\n    </Pane>\n    <SelectMenu\n      title=\"Select name\"\n      onFilterChange={filter => setState({filter})}\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Disabled option example`}</h2>\n    <p>{`This example shows basic usage for disabling some options. Options that are disabled cannot be clicked and their labels are muted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <SelectMenu\n      title=\"Select Option\"\n      options={\n        [{ label: \"Disabled\", value: \"disabled\", disabled: true }, { label: \"Not Disabled\", value: \"not-disabled\" }]\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Custom Title Example`}</h2>\n    <p>{`This example shows how one should use titleView to pass in a custom title.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <SelectMenu\n      title=\"Select Option\"\n      tooltipContent=\"Choose one of the options below.\"\n      titleView={({ close, title, headerHeight }) => {\n        return (\n          <Pane\n            display=\"flex\"\n            alignItems=\"center\"\n            borderBottom=\"default\"\n            padding={8}\n            height={headerHeight}\n            boxSizing=\"border-box\"\n          >\n            <Pane flex=\"1\" display=\"flex\" alignItems=\"center\">\n              <Heading size={400}>{title}</Heading>\n                <Tooltip content=\"Pick one of the options below\">\n                  <HelpIcon size={12} marginLeft={4} />\n                </Tooltip>\n            </Pane>\n            <IconButton\n              icon={CrossIcon}\n              appearance=\"minimal\"\n              height={24}\n              onClick={close}\n            />\n          </Pane>\n        )\n      }}\n      options={\n        [{ label: \"Option 1\", value: \"option-1\"}, { label: \"Option 2\", value: \"option-2\" }]\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Custom Filter PlaceHolder and Icon Example`}</h2>\n    <p>{`It's possible to change the filter placeholder and filter icon through the `}<inlineCode parentName=\"p\">{`filterPlaceholder`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`filterIcon`}</inlineCode>{` props.`}</p>\n    <p>{`Note that the icon can be one found in Segment's various `}<a parentName=\"p\" {...{\n        \"href\": \"https://evergreen.segment.com/components/icons\"\n      }}>{`icons`}</a>{`, or `}<inlineCode parentName=\"p\">{`none`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      title=\"Select name\"\n      options={\n        ['Comedy', 'Drama', 'Fantasy', 'Family', 'Action']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n      filterPlaceholder={\"Choose a genre\"}\n      filterIcon={FilmIcon}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"SelectMenu\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { Location, navigate } from '@reach/router'\nimport { Button, IconButton, Tooltip, ArrowLeftIcon } from 'molecular-ui'\nimport IA from '../IA'\nimport DocsMDXProvider from './DocsMDXProvider'\nimport TopBar from './TopBar'\nimport Layout from './Layout'\nimport OverviewItem from './OverviewItem'\nimport PageFooter from './PageFooter'\n\nconst flatItems = [\n  ...IA.foundation.items.map(item => {\n    return {\n      ...item,\n      related: [\n        ...(item.related || []),\n        ...IA.foundation.items.map(x => x.id).filter(id => id !== item.id)\n      ]\n    }\n  }),\n  ...IA.components.items.reduce((acc, curr) => {\n    return [\n      ...acc,\n      ...curr.items.map(item => {\n        return {\n          ...item,\n          related: [\n            ...(item.related || []),\n            ...curr.items.map(item => item.id).filter(id => id !== item.id)\n          ]\n        }\n      })\n    ]\n  }, [])\n]\n\n/**\n * Used for component pages.\n */\nclass Page extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    location: PropTypes.object.isRequired\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo)\n  }\n\n  getMetaInfo = () => {\n    const id = this.props.location.pathname.split('/')[2]\n    return flatItems.find(item => item.id === id)\n  }\n\n  getRelatedItems = metaInfo => {\n    return (metaInfo.related || []).map(id => {\n      return flatItems.find(item => item.id === id)\n    })\n  }\n\n  render() {\n    const metaInfo = this.getMetaInfo()\n    if (!metaInfo) return null\n    const relatedItems = this.getRelatedItems(metaInfo)\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>{metaInfo.name} · MolecularUI</title>\n          <meta\n            property=\"og:title\"\n            content={`${metaInfo.name} · MolecularUI`}\n          />\n          <meta\n            property=\"twitter:title\"\n            content={`${metaInfo.name} · MolecularUI`}\n          />\n        </Helmet>\n        <div>\n          <TopBar />\n          <main>\n            <article className=\"MDXPage\">\n              <header className=\"MDXPage-header\">\n                <div className=\"bg-tint1\">\n                  <div className=\"MDXPage-headerContent Container Container--narrow\">\n                    <div className=\"MDXPage-headerContentLeft\">\n                      <Tooltip content=\"Back to Overview\">\n                        <IconButton\n                          autoFocus\n                          onClick={() => {\n                            // Non-ideal, but Tooltip doesn't play nice when using is={Link}\n                            navigate('/components')\n                          }}\n                          marginLeft={-54}\n                          marginRight={16}\n                          display=\"inline-flex\"\n                          icon={ArrowLeftIcon}\n                          height={40}\n                        />\n                      </Tooltip>\n\n                      <h1>{metaInfo.name}</h1>\n                    </div>\n\n                    <Button\n                      is=\"a\"\n                      height={40}\n                      href={metaInfo.github}\n                      target=\"_blank\"\n                    >\n                      View on GitHub\n                    </Button>\n                  </div>\n                </div>\n              </header>\n              <div\n                className=\"Container Container--narrow\"\n                style={{ marginBottom: 120 }}\n              >\n                <DocsMDXProvider>{this.props.children}</DocsMDXProvider>\n              </div>\n            </article>\n\n            {relatedItems.length > 0 && (\n              <div\n                className=\"Overview-group Container Container--narrow\"\n                style={{ marginBottom: 120 }}\n              >\n                <h3 className=\"Overview-groupTitle\">Related</h3>\n                <div className=\"Overview-groupItems\">\n                  {relatedItems.map(item => {\n                    return (\n                      <OverviewItem\n                        key={item.name}\n                        id={item.id}\n                        image={item.image}\n                      >\n                        {item.name}\n                      </OverviewItem>\n                    )\n                  })}\n                </div>\n              </div>\n            )}\n\n            <div\n              className=\"Container Container--narrow\"\n              style={{ marginBottom: 120 }}\n            >\n              <Button\n                is={Link}\n                to=\"/components\"\n                display=\"inline-flex\"\n                iconBefore={ArrowLeftIcon}\n                height={40}\n              >\n                Back to Overview\n              </Button>\n            </div>\n          </main>\n        </div>\n        <PageFooter />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default class PageContainer extends React.Component {\n  render() {\n    return (\n      <Layout>\n        <Location>\n          {({ location }) => {\n            return <Page location={location} {...this.props} />\n          }}\n        </Location>\n      </Layout>\n    )\n  }\n}\n"],"sourceRoot":""}